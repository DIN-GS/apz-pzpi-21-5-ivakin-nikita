1 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Серверна частина програмної системи написана на Spring Boot 3, з використанням Spring Security Framework та Spring Data JPA. Ці фреймворки забезпечують швидку конфігурацію проекту та його надійність. Для автентифікації користувачів використовувався лінійний механізм з використанням JWT(JSON Web Tokens). За допомогою JWT токенів забезпечується безпека та контроль доступу до ресурсів програмної системи. Шифрування паролів виконується за допомогою BCryptPasswordEncoder і це дає високий рівень безпеки. Для зберігання даних була обрана реляційна база даних PostgreSQL. Разом з нею використовується Liquibase для контролю змін у базі даних.  Програмна система взаємодіє з користувачами, приймає запити від них, виконує бізнес логіку та потім взаємодіє з базою даних за допомогою Hibernate та Spring Data JPA. Ці ORM забезпечують просту роботу з базами даних. Локалізація відсутня, вона буде зроблена для frontend застосунку за допомогою i18n. Frontend, мобільний застосунок взаємодіють з backend-ом через REST API, користуючись HTTP запитами. ІоТ також взаємодіє з сервером через HTTP запит. Також є консольний застосунок, який потрібен для оновлення ІоТ, який взаємодіє з ним за рахунок підключення до однієї локальної мережи та передачі потрібної інформації на порти пристроїв у локальній мережі. Взаємодіє компонентів зображено на діаграмі розгортання (див. Додаток А).
Структура серверного додатку побудована зо структурою MVC, яка зображена на (див. Додаток Б). Ця структура розділяє застосунок на три основні компоненти, а саме: контролер, модель, сервіси. MVC надає гнучкості, що дає легкість створення нового функціоналу або редагування старого.  Також у програмі реалізовано Exception Handling та Validation.
На сервері організована пакетна структура, де кожний пакет відповідає за певну частину функціоналу. Це полегшує розуміння програмної системи та підтримку проекту.
Також слід зазначити, що для випуску програмної системи слід додати методи шифрування системи загалом, оскільки платформа зараз розробляється більш під військові цілі.


2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Діаграма розгортання програмної системи для контролю логістичного забезпечення війська показує типові компоненти та їх взаємодію в системі(див. Додаток А). Система складається з наступних компонентів:
Веб-сервер: Веб-сервер слугує інтерфейсом для користувачів для доступу до інформації про систему та керування нею. Він реалізований за допомогою таких технологій, як Angular, HTML та SCSS.
Сервер баз даних: Сервер баз даних відповідає за збереження інформації про систему, а саме діні про бойові підрозділи, видані ресурси, блок пости, розумні девайси, командирів бойових груп, машини постачання та запити на поставку. Він реалізований за допомогою такої технології PostgreSQL.
Сервер додатків: Сервер додатків відповідає за логіку системи та взаємодію між різними компонентами. Він реалізований за допомогою такої технології, як Spring Boot, REST API, Hibernate, Spring Data JPA та Liquibase.
ІоТ девайс: Являє себе консольним застосунком, оскільки не вистачало часо для розробки фізичної моделі. Він використовує java.net пакет для відправки HTTP запитів на сервер, а саме їх запити на запис машини до бази дани, отримання інформації про неї та автентифікації.
Мобільні пристрої: Мобільні пристрої використовуються командирами взводів для взаємодії з системою. Вони можуть мати операційну систему Android або iOS.
Компоненти програмної системи для контролю логістичного забезпечення війська взаємодіють один з одним наступним чином:
Серверний додаток: Відповідає за прийом запитів від веб, мобільного додатків та ІоТ пристроїв. Виконує бізнес логіку, звертається до сервера баз даних для отримання інформації її редагування та збереження. Та відправляє данні на ІоТ пристрої, веб-застосунок та мобільний застосунок.
Веб-додаток: З використанням веб-додатку адміністратор має можливості створення блок постів та установки на них розумних пристроїв. Командири бойових груп створюють групи, назначають командирів до певних груп, відправляють ресурси своїм дочірнім підрозділам, виконують запити на підвоз нових ресурсів. Командир логістичної роти приймає завдання на виконання логістичного забезпечення відмічає доставку ресурсів та створює машини для їх доставки.
Мобальний додаток: Мобільний додаток дає можливість командиру взводу подавати запити на підвоз ресурсів на позиції, оновлення стану ресурсів групи та підтверджувати отримання ресурсів.
ІоТ пристрій: ІоТ-пристрій сканує машини які проїжджають пост отримую данні про них та записую їх проїзд та перевірку у базу даних.


3 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Головним функціоналом програмної системи контролю логістичного забезпечення війська є електронна звітність та можливості слідкування за розподілом ресурсів між бойовими групами, запитами на постачання підтвердження виконання поставок, контроль кількості ресурсів, що залишилися для виконання завдань, слідкування за проходженнями машин постачання та перегляд чіткої звітності хто запросив їх та хто надав. На діаграмі прецедентів відображено основну логіку, функціональність серверного застосунку та взаємодію користувачів з ним. (див. Додаток Г)
Функції, що реалізовані у додатку:
-	Авторизація з використанням JWT токенів, що надає захист ресурсів та контроль доступу до них. Налаштування цього механізму розташовані у пакеті config та token. У пакеті config реалізовано клас SecurityConfig.java, що задає доступ до ресурсів, а пакеті token знаходиться логіка створення JWT токенів та їх обробка;
-	Можливість адмінів створювати блок пости та встановлювати на них розумні пристрої, які будуть сканувати машини постачання.
-	Можливість командирів бойових груп створювати бойові підрозділи та надавати їм ресурси для виконання бойових задач.
-	Можливість командирів бойових груп оновлювати стан ресурсів бойових груп.
-	Можливість командирів бойових груп надавати ресурси дочірнім бойовим групам за їх запитом.
-	Можливість командирів бойових груп переглядати стан власної бойової групи.
-	Можливість командирів бойових груп робити запити на постачання ресурсів.
-	Можливість командирів бойових груп назначати командирів їх дочірніх бойових груп.
-	Можливість командирів бойових груп переглядати запити на постачання їх дочірніх бойових груп.
-	Можливість командирів логістичних рот приймати задачі на постачання ресурсів у бригаду.
-	Можливість командирів логістичних груп підтвердження доставки ресурсів.
-	Можливість командирів бойових груп створення машин постачання для перевезення ресурсів.
-	Отримання командирами підрозділів повідомлень про потребу у ресурсах після оновлень за рахунок коефіцієнту ресурсів, які повинні залишатися після виконання бойового завдання.
-	Можливість запису проходу машиною постачання блок посту та запис рівня її перегляду, за допомогою ІоТ пристрою.
Наведені функції відображають основні можливості та процеси, які полегшують контроль розподілення ресурсів між бойовими групами та постачання, та запобігає втраті даних про операції з ресурсами їх підробці, а також надає можливість більш швидко розібратися де саме відбулися певні проблеми у постачанні.
Під час реалізації цього функціоналу дотримувалися правила чистого коду, однак через ситуацією зі світлом є місця де код не допрацьований.
CamelCase та описові назви: Дотримання назв класів, методів та змінних з CamelCase та використання описових назв, які чітко відображають їхню функціональність.
Форматування коду: Використання стандартних правил форматування, правильна відступів, розташування дужок тощо. Використання іменованих конвенцій Spring: Використання конвенцій іменування для створення контролерів, сервісів, репозиторіїв і т. д. у Spring, таких як AdminController, AdminService, AdminRepository.
Використання компонентної архітектури Spring: Розділення коду на компоненти, використання анотацій Spring для правильного управління залежностями та іншими аспектами. Безпека: Застосування засобів безпеки, таких як Spring Security, для захисту ресурсів.

4 ПОБУДОВА ER-ДІАГРАМИ

	Для зберігання даних використовується PostgreSQL як реляційна база даних. Для відображення структури бази даних була створення ER діаграма (див. Додаток В) яка є основою для створення бази даних. Вона складається з 19 таблиць: користувачів, токенів, Бойових груп(бригада, батальйон, рота, взвод, логістична рота), бойових командирів(бригадний командир, командир батальйону, командир роти, командири взводу та логістичної роти), таблиця для відмітки автівок (car_check), таблиця виданих ресурсів(given_resources), таблиця запитів на постачання(supply_request), таблиця запрошених ресурсів(resources_request), таблиця девайсів для сканування (scanning devices), та таблиця блок постів(post).
У базі даних наявні наступні зв’язки між сутностями:
-	Бригадний командир один до багатьох з командиром батальйонів.
-	Бригадний командир один до багатьох з виданими ресурсами.
-	Бригадний командир один до одного з бригадою.
-	Бригадний командир один до багатьох з командиром логістичної роти.
-	Командири бойових груп один до одного з користувачем.
-	Бригада одна до багатьох з батальйоном.
-	Бригада одна до багатьох з логістичними ротами.
-	Бригада одна до багатьох з виданими ресурсами.
-	Бригада одна до багатьох з командирами батальйону.
-	Командир батальйону один до одного з батальйоном.
-	Командир батальйону один до багатьох з командирами роти.
-	Командир батальйону один до одного з виданими ресурсами.
-	Батальйон один до багатьох з ротами.
-	Командир роти один до багатьох з командирами взводів.
-	Командир роти один до одного з ротою.
-	Командир роти один до багатьох з виданими ресурсами.
-	Рота один до багатьох з взводами.
-	Командир взводу один до багатьох з виданими ресурсами.
-	Командир взводу один до одного зі взводом.
-	Командир логістичної роти один до одного з логістичною ротою.
-	Командир логістичної роти один до багатьох з виданими ресурсами.
-	Логістична рота один до багатьох з машиною постачання.
-	Машина постачання один до багатьох з перевіркою машини.
-	Машина для постачання один до одного з ресурсами постачання.
-	Ресурси постачання один до одного з запитаними ресурсами.
-	Пост один до багатьох або жодного з скануючим девайсом.
-	Скануючий девайс один до  багатьох з перевіркою машин.

5 СПЕЦИФІКАЦІЯ REST

REST API в даному проекті складається із 45 кінцевої точки. Кожний ендпоінт відповідає за надання даних клієнту та виконання бізнес логіки. Специфікація кожного ендпоінту наведена у виді таблиці (див. таб. 1)

6 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Серверна частина програмної системи побудована за структурою: Модель-Контролер-Сервіс (Model-Controller-Service) або MVC, цю структуру можна переглянути на діаграмі пакетів (див. Додаток Б).  MVC дозволяє розділити
логіку додатку на три ключові компоненти: модель, контролери та сервіси, що спрощує управління кодом та розуміння системи. Розділена структура дозволяє додавати нові функції або змінювати існуючі, мінімізуючи взаємозалежність між компонентами. Серверна частина програмної системи розподілена по таким пакетам:
Пакет «Сервіси (Services)» містить класи, які містять бізнес-логіку додатка. Сервіси виконують конкретні операції над даними та обробляють їх відповідно до бізнес-правил.
Пакет «Репозиторії (Repositories)» містить класи, які взаємодіють з базою даних для виконання операцій CRUD (створення, читання, оновлення, видалення) над об'єктами.
Пакет «Контролери (Controllers)» містить контролери , які відповідають за обробку запитів від клієнтів, виклик сервісів та повернення відповідей клієнтам.
Пакет «Моделі (Models)» містить моделі, які відображають структуру даних додатка. Вони відображають об'єкти з бази даних та дані, які передаються через API.
Пакет «Конфігурація (Configuration)» міститися класи, які налаштовують різні аспекти додатка: підключення до бази даних, налаштування бібліотек, зберігання констант.
Пакет «Помилки (Exceptions)» містить створенні власні помилки та їх перехоплювачі. Можливість створювати власні помилки дозволяє більш точно описувати та обробляти виняткові ситуації, що виникають у додатку.
Серверна частина використовує пакетну структуру для організації класів за їх функціональністю, де кожен пакет відповідає за певний аспект додатку. Ця архітектурна структура полегшує розуміння, розширення та підтримку проекту, допомагаючи зберігати код організованим і керованим.

ДОДАТОК А
Специфікація REST

Таблиця 1 – Специфікація REST API

Рівень доступу	Ендпоінт	HTTP метод	Призначення
Everybody	/api/auth/register	POST	Реєстрація користувача
Everybody	/api/auth/authenticate	POST	Автентифікація користувача
Logistic Commander	/api/log-com/confirm/delivery-of-supply-request/{id}	PUT	Підтвердження доставки ресурсів
Logistic Commander	/api/log-com/create/supply-car	POST	Створення машини постачання
Logistic Commander	/api/log-com/get/all-requests	GET	Перегляд усіх запитів на постачання
Logistic Commander	/api/log-com/get/car-checks/{id}	GET	Перегляд сканувань машини постачання
Logistic Commander	/api/log-com/take/execution-of-supply-request/{id}	POST	Прийняття виконання поставки
Battalion Commander	/api/bat-com/ask/for-resources	POST	Створення запиту на постачання
Battalion Commander	/api/bat-com/assign/company-commander	PUT	Призначення командира роти
Battalion Commander	/api/bat-com/battalion-company-groups	GET	Отримання рот батальйону
Battalion Commander	/api/bat-com/confirm/getting-of-resources	PUT	Підтвердження отримання ресурсів
Battalion Commander	/api/bat-com/create/company	POST	Створення роти
Battalion Commander	/api/bat-com/get-battalion-resources	GET	Отримання стану ресурсів батальйону
Battalion Commander	/api/bat-com/get/battalion-requests	GET	Перегляд запитів батальйону
Battalion Commander	/api/bat-com/get/company-requests	GET	Отримання ресурсів роти
Battalion Commander	/api/bat-com/update/battalion-resources	PUT	Оновлення ресурсів батальйону
Company Commander	/api/com-com/ask/for-resources	POST	Запит на поставку ресурсів
Company Commander	/api/com-com/assign/plat-commander	PUT	Призначення командира взводу
Company Commander	/api/com-com/company-plat-groups	GET	Отримання взводів роти
Company Commander	/api/com-com/confirm/getting-of-resources	PUT	Підтвердження отримання ресурсів ротою
Company Commander	/api/com-com/create/plat	POST	Створення взводу
Company Commander	/api/com-com/get-company-resources	GET	Отримання ресурсів роти
Company Commander	/api/com-com/get/company-requests	GET	Отримання запитів власної роти
Brigade Commander	/api/brig-com/assign/battalion-commander	PUT	Призначення командира батальйону
Brigade Commander	/api/brig-com/brigade-battalion-groups	GET	Перегляд батальйоній бригади
Company Commander	/api/com-com/get/plat-requests	GET	Отримання запитів взводів роти
Company Commander	/api/com-com/send/resources-to-plat	POST	Відправка ресурсів взводу
Company Commander	/api/com-com/update/company-resources	PUT	Оновлення стану роти
Plat Commander	/api/plat-com/ask/for-resources	POST	Запит на постачання ресурсів
Plat Commander	/api/plat-com/confirm/getting-of-resources	PUT	Підтвердження отримання ресурсів
Plat Commander	/api/plat-com/get/plat-requests	GET	Отримання запитів взводу
Plat Commander	/api/plat-com/update/plat-resources	PUT	Оновлення ресурсів взводу
Brigade Commander	/api/brig-com/assign/logistic-commander	PUT	Призначення логістичного командира
Brigade Commander	/api/brig-com/assign/battalion-commander	PUT	Призначення командира батальйона
Brigade Commander	/api/brig-com/brigade-battalion-groups	GET	Перегляд батальйоній бригади
Brigade Commander	/api/brig-com/confirm/getting-of-resources	PUT	Підтвердження отримання ресурсів
Brigade Commander	/api/brig-com/create/battalion	POST	Створення батальйону
Brigade Commander	/api/brig-com/create/brigade	POST	Створення бригади
Brigade Commander	/api/brig-com/create/logistic-company	POST	Створення логістичної роти
Brigade Commander	/api/brig-com/get-brigade-resources	GET	Отримання ресурсів бригади
Brigade Commander	/api/brig-com/get/battalion-requests	GET	Отримання запитів на постачання батальйону
Brigade Commander	/api/brig-com/send/resources-to-battalion	POST	Відправити ресурси до батальйону
Brigade Commander	/api/brig-com/get/brigade-requests	GET	Отримання запитів на постачання бригади
Brigade Commander	/api/brig-com/update/brigade-resources	PUT	Оновити ресурси бригади
Scanning Device	/api/device/scan-car	POST	Сканування автівки
Battalion Commander	/api/bat-com/send/resources-to-company	POST	Відправка ресурсів роті
Brigade Commander	/api/brig-com/ask/for-resources	POST	Запит на постачання ресурсів
